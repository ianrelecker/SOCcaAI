trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  pythonVersion: '3.10'

stages:
- stage: Test
  jobs:
  - job: TestJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true

    - script: |
        chmod +x ./install_dependencies.sh
        ./install_dependencies.sh
      displayName: 'Install dependencies'

    - script: |
        mkdir -p $(System.DefaultWorkingDirectory)/testresults
        pytest tests/ --cov=kryptos_working --cov-report=xml --junitxml=testresults/test-results.xml
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        mergeTestResults: true
        testRunTitle: 'Python tests'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
      condition: succeededOrFailed()

- stage: Deploy
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: DeployJob
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true

    - script: |
        chmod +x ./install_dependencies.sh
        ./install_dependencies.sh
      displayName: 'Install dependencies'
      
    - script: |
        chmod +x ./kryptos_working/sentinel_exporter.py
        chmod +x ./startup.sh
      displayName: 'Set executable permissions'

    - task: AzureWebApp@1
      inputs:
        azureSubscription: 'SOCca-Service-Connection'
        appType: 'webAppLinux'
        appName: 'soccav2-sentinel'
        deployToSlotOrASE: true
        resourceGroupName: 'socca-resources'
        slotName: 'production'
        package: '$(System.DefaultWorkingDirectory)'
        runtimeStack: 'PYTHON|3.10'
        startUpCommand: './startup.sh'
        appSettings: |
          SCM_DO_BUILD_DURING_DEPLOYMENT=true
          ENABLE_ORYX_BUILD=true
          # OpenAI settings
          OPENAI_API_KEY=$(OPENAI_API_KEY)
          # NVD settings
          NVD_API_KEY=$(NVD_API_KEY)
          # Microsoft Sentinel integration settings
          SENTINEL_WORKSPACE_ID=$(SENTINEL_WORKSPACE_ID)
          SENTINEL_PRIMARY_KEY=$(SENTINEL_PRIMARY_KEY)
          SENTINEL_LOG_TYPE=SOCcaCVE
          SENTINEL_API_VERSION=2016-04-01
          # General settings
          SITE_URL=https://socca.tech
          CVSS_CRITICAL_THRESHOLD=8.0